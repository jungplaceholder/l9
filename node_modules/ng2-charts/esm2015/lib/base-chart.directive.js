/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, ElementRef, } from '@angular/core';
import * as chartJs from 'chart.js';
import { getColors } from './get-colors';
import { ThemeService } from './theme.service';
import * as _ from 'lodash';
/**
 * @record
 */
export function PluginServiceGlobalRegistration() { }
if (false) {
    /** @type {?|undefined} */
    PluginServiceGlobalRegistration.prototype.id;
}
/**
 * @record
 */
export function PluginServiceRegistrationOptions() { }
if (false) {
    /**
     * @param {?} chartInstance
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.beforeInit = function (chartInstance, options) { };
    /**
     * @param {?} chartInstance
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.afterInit = function (chartInstance, options) { };
    /**
     * @param {?} chartInstance
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.beforeUpdate = function (chartInstance, options) { };
    /**
     * @param {?} chartInstance
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.afterUpdate = function (chartInstance, options) { };
    /**
     * @param {?} chartInstance
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.beforeLayout = function (chartInstance, options) { };
    /**
     * @param {?} chartInstance
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.afterLayout = function (chartInstance, options) { };
    /**
     * @param {?} chartInstance
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.beforeDatasetsUpdate = function (chartInstance, options) { };
    /**
     * @param {?} chartInstance
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.afterDatasetsUpdate = function (chartInstance, options) { };
    /**
     * @param {?} chartInstance
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.beforeDatasetUpdate = function (chartInstance, options) { };
    /**
     * @param {?} chartInstance
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.afterDatasetUpdate = function (chartInstance, options) { };
    /**
     * @param {?} chartInstance
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.beforeRender = function (chartInstance, options) { };
    /**
     * @param {?} chartInstance
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.afterRender = function (chartInstance, options) { };
    /**
     * @param {?} chartInstance
     * @param {?} easing
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.beforeDraw = function (chartInstance, easing, options) { };
    /**
     * @param {?} chartInstance
     * @param {?} easing
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.afterDraw = function (chartInstance, easing, options) { };
    /**
     * @param {?} chartInstance
     * @param {?} easing
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.beforeDatasetsDraw = function (chartInstance, easing, options) { };
    /**
     * @param {?} chartInstance
     * @param {?} easing
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.afterDatasetsDraw = function (chartInstance, easing, options) { };
    /**
     * @param {?} chartInstance
     * @param {?} easing
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.beforeDatasetDraw = function (chartInstance, easing, options) { };
    /**
     * @param {?} chartInstance
     * @param {?} easing
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.afterDatasetDraw = function (chartInstance, easing, options) { };
    /**
     * @param {?} chartInstance
     * @param {?=} tooltipData
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.beforeTooltipDraw = function (chartInstance, tooltipData, options) { };
    /**
     * @param {?} chartInstance
     * @param {?=} tooltipData
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.afterTooltipDraw = function (chartInstance, tooltipData, options) { };
    /**
     * @param {?} chartInstance
     * @param {?} event
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.beforeEvent = function (chartInstance, event, options) { };
    /**
     * @param {?} chartInstance
     * @param {?} event
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.afterEvent = function (chartInstance, event, options) { };
    /**
     * @param {?} chartInstance
     * @param {?} newChartSize
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.resize = function (chartInstance, newChartSize, options) { };
    /**
     * @param {?} chartInstance
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.destroy = function (chartInstance) { };
    /**
     * @deprecated since version 2.5.0. Use `afterLayout` instead.
     * @param {?} chartInstance
     * @param {?=} options
     * @return {?}
     */
    PluginServiceRegistrationOptions.prototype.afterScaleUpdate = function (chartInstance, options) { };
}
export class BaseChartDirective {
    /**
     * @param {?} element
     * @param {?} themeService
     */
    constructor(element, themeService) {
        this.element = element;
        this.themeService = themeService;
        this.options = {};
        this.chartClick = new EventEmitter();
        this.chartHover = new EventEmitter();
        this.initFlag = false;
        this.subs = [];
    }
    /**
     * Register a plugin.
     * @param {?} plugin
     * @return {?}
     */
    static registerPlugin(plugin) {
        chartJs.Chart.plugins.register(plugin);
    }
    /**
     * @param {?} plugin
     * @return {?}
     */
    static unregisterPlugin(plugin) {
        chartJs.Chart.plugins.unregister(plugin);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ctx = this.element.nativeElement.getContext('2d');
        this.initFlag = true;
        if (this.data || this.datasets) {
            this.refresh();
        }
        this.subs.push(this.themeService.colorschemesOptions.subscribe((/**
         * @param {?} r
         * @return {?}
         */
        r => this.themeChanged(r))));
    }
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    themeChanged(options) {
        this.refresh();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.initFlag) {
            /** @type {?} */
            let updateRequired = false;
            // Check if the changes are in the data or datasets or labels or legend
            if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {
                if (changes.data) {
                    this.updateChartData(changes.data.currentValue);
                }
                else {
                    this.updateChartData(changes.datasets.currentValue);
                }
                updateRequired = true;
            }
            if (changes.hasOwnProperty('labels')) {
                this.chart.data.labels = changes.labels.currentValue;
                updateRequired = true;
            }
            if (changes.hasOwnProperty('legend')) {
                this.chart.config.options.legend.display = changes.legend.currentValue;
                this.chart.generateLegend();
                updateRequired = true;
            }
            if (updateRequired) {
                // ... if so, update chart
                this.chart.update();
            }
            else {
                // otherwise rebuild the chart
                this.refresh();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.chart) {
            this.chart.destroy();
            this.chart = void 0;
        }
        this.subs.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => x.unsubscribe()));
    }
    /**
     * @param {?=} duration
     * @param {?=} lazy
     * @return {?}
     */
    update(duration, lazy) {
        return this.chart.update(duration, lazy);
    }
    /**
     * @param {?} index
     * @param {?} hidden
     * @return {?}
     */
    hideDataset(index, hidden) {
        this.chart.getDatasetMeta(index).hidden = hidden;
        this.chart.update();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    isDatasetHidden(index) {
        return this.chart.getDatasetMeta(index).hidden;
    }
    /**
     * @return {?}
     */
    toBase64Image() {
        return this.chart.toBase64Image();
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    getChartBuilder(ctx /*, data:any[], options:any*/) {
        /** @type {?} */
        const datasets = this.getDatasets();
        /** @type {?} */
        const options = Object.assign({}, this.options);
        if (this.legend === false) {
            options.legend = { display: false };
        }
        // hook for onHover and onClick events
        options.hover = options.hover || {};
        if (!options.hover.onHover) {
            options.hover.onHover = (/**
             * @param {?} event
             * @param {?} active
             * @return {?}
             */
            (event, active) => {
                if (active && !active.length) {
                    return;
                }
                this.chartHover.emit({ event, active });
            });
        }
        if (!options.onClick) {
            options.onClick = (/**
             * @param {?=} event
             * @param {?=} active
             * @return {?}
             */
            (event, active) => {
                this.chartClick.emit({ event, active });
            });
        }
        /** @type {?} */
        const mergedOptions = this.smartMerge(options, this.themeService.getColorschemesOptions());
        /** @type {?} */
        const chartConfig = {
            type: this.chartType,
            data: {
                labels: this.labels,
                datasets
            },
            plugins: this.plugins,
            options: mergedOptions,
        };
        return new chartJs.Chart(ctx, chartConfig);
    }
    /**
     * @param {?} options
     * @param {?} overrides
     * @param {?=} level
     * @return {?}
     */
    smartMerge(options, overrides, level = 0) {
        if (level === 0) {
            options = _.cloneDeep(options);
        }
        /** @type {?} */
        const keysToUpdate = Object.keys(overrides);
        keysToUpdate.forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            if (Array.isArray(overrides[key])) {
                /** @type {?} */
                const arrayElements = options[key];
                if (arrayElements) {
                    arrayElements.forEach((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => {
                        this.smartMerge(r, overrides[key][0], level + 1);
                    }));
                }
            }
            else if (typeof (overrides[key]) === 'object') {
                if (!(key in options)) {
                    options[key] = {};
                }
                this.smartMerge(options[key], overrides[key], level + 1);
            }
            else {
                options[key] = overrides[key];
            }
        }));
        if (level === 0) {
            return options;
        }
    }
    /**
     * @private
     * @param {?} v
     * @return {?}
     */
    isChartDataSetsArray(v) {
        /** @type {?} */
        const elm = v[0];
        return (typeof (elm) === 'object') && 'data' in elm;
    }
    /**
     * @private
     * @param {?} label
     * @return {?}
     */
    isMultiLineLabel(label) {
        return Array.isArray(label);
    }
    /**
     * @private
     * @param {?} label
     * @return {?}
     */
    joinLabel(label) {
        if (!label) {
            return null;
        }
        if (this.isMultiLineLabel(label)) {
            return label.join(' ');
        }
        else {
            return label;
        }
    }
    /**
     * @private
     * @param {?} newDataValues
     * @return {?}
     */
    updateChartData(newDataValues) {
        if (this.isChartDataSetsArray(newDataValues)) {
            if (newDataValues.length === this.chart.data.datasets.length) {
                this.chart.data.datasets.forEach((/**
                 * @param {?} dataset
                 * @param {?} i
                 * @return {?}
                 */
                (dataset, i) => {
                    dataset.data = newDataValues[i].data;
                    if (newDataValues[i].label) {
                        dataset.label = newDataValues[i].label;
                    }
                }));
            }
            else {
                this.chart.data.datasets = [...newDataValues];
            }
        }
        else if (!this.isSingleDataSet(newDataValues)) {
            if (newDataValues.length === this.chart.data.datasets.length) {
                this.chart.data.datasets.forEach((/**
                 * @param {?} dataset
                 * @param {?} i
                 * @return {?}
                 */
                (dataset, i) => {
                    dataset.data = newDataValues[i];
                }));
            }
            else {
                this.chart.data.datasets = newDataValues.map((/**
                 * @param {?} data
                 * @param {?} index
                 * @return {?}
                 */
                (data, index) => {
                    return { data, label: this.joinLabel(this.labels[index]) || `Label ${index}` };
                }));
            }
        }
        else {
            this.chart.data.datasets[0].data = newDataValues;
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    isSingleDataSet(data) {
        return !Array.isArray(data[0]);
    }
    /**
     * @private
     * @return {?}
     */
    getDatasets() {
        /** @type {?} */
        let datasets = void 0;
        // in case if datasets is not provided, but data is present
        if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {
            if (!this.isSingleDataSet(this.data)) {
                datasets = this.data.map((/**
                 * @param {?} data
                 * @param {?} index
                 * @return {?}
                 */
                (data, index) => {
                    return { data, label: this.joinLabel(this.labels[index]) || `Label ${index}` };
                }));
            }
            else {
                datasets = [{ data: this.data, label: `Label 0` }];
            }
        }
        if (this.datasets && this.datasets.length ||
            (datasets && datasets.length)) {
            datasets = (this.datasets || datasets)
                .map((/**
             * @param {?} elm
             * @param {?} index
             * @return {?}
             */
            (elm, index) => {
                /** @type {?} */
                const newElm = Object.assign({}, elm);
                if (this.colors && this.colors.length) {
                    Object.assign(newElm, this.colors[index]);
                }
                else {
                    Object.assign(newElm, getColors(this.chartType, index, newElm.data.length));
                }
                return newElm;
            }));
        }
        if (!datasets) {
            throw new Error(`ng-charts configuration error,
      data or datasets field are required to render char ${this.chartType}`);
        }
        return datasets;
    }
    /**
     * @private
     * @return {?}
     */
    refresh() {
        // if (this.options && this.options.responsive) {
        //   setTimeout(() => this.refresh(), 50);
        // }
        // todo: remove this line, it is producing flickering
        if (this.chart) {
            this.chart.destroy();
            this.chart = void 0;
        }
        this.chart = this.getChartBuilder(this.ctx /*, data, this.options*/);
    }
}
BaseChartDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'canvas[baseChart]',
                exportAs: 'base-chart'
            },] }
];
/** @nocollapse */
BaseChartDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ThemeService }
];
BaseChartDirective.propDecorators = {
    data: [{ type: Input }],
    datasets: [{ type: Input }],
    labels: [{ type: Input }],
    options: [{ type: Input }],
    chartType: [{ type: Input }],
    colors: [{ type: Input }],
    legend: [{ type: Input }],
    plugins: [{ type: Input }],
    chartClick: [{ type: Output }],
    chartHover: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    BaseChartDirective.prototype.data;
    /** @type {?} */
    BaseChartDirective.prototype.datasets;
    /** @type {?} */
    BaseChartDirective.prototype.labels;
    /** @type {?} */
    BaseChartDirective.prototype.options;
    /** @type {?} */
    BaseChartDirective.prototype.chartType;
    /** @type {?} */
    BaseChartDirective.prototype.colors;
    /** @type {?} */
    BaseChartDirective.prototype.legend;
    /** @type {?} */
    BaseChartDirective.prototype.plugins;
    /** @type {?} */
    BaseChartDirective.prototype.chartClick;
    /** @type {?} */
    BaseChartDirective.prototype.chartHover;
    /** @type {?} */
    BaseChartDirective.prototype.ctx;
    /** @type {?} */
    BaseChartDirective.prototype.chart;
    /**
     * @type {?}
     * @private
     */
    BaseChartDirective.prototype.initFlag;
    /**
     * @type {?}
     * @private
     */
    BaseChartDirective.prototype.subs;
    /**
     * @type {?}
     * @private
     */
    BaseChartDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    BaseChartDirective.prototype.themeService;
}
//# sourceMappingURL=data:application/json;base64,